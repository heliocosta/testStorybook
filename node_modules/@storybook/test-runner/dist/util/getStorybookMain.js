var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getStorybookMain_exports = {};
__export(getStorybookMain_exports, {
  getStorybookMain: () => getStorybookMain,
  resetStorybookMainCache: () => resetStorybookMainCache
});
module.exports = __toCommonJS(getStorybookMain_exports);
var import_path = require("path");
var import_core_common = require("@storybook/core-common");
var import_ts_dedent = __toESM(require("ts-dedent"));
let storybookMainConfig = /* @__PURE__ */ new Map();
const getStorybookMain = /* @__PURE__ */ __name((configDir) => {
  if (storybookMainConfig.has(configDir)) {
    return storybookMainConfig.get(configDir);
  } else {
    storybookMainConfig.set(configDir, (0, import_core_common.serverRequire)((0, import_path.join)((0, import_path.resolve)(configDir), "main")));
  }
  const mainConfig = storybookMainConfig.get(configDir);
  if (!mainConfig) {
    throw new Error(`Could not load main.js in ${configDir}. Is the config directory correct? You can change it by using --config-dir <path-to-dir>`);
  }
  if (!mainConfig.stories || mainConfig.stories.length === 0) {
    throw new Error(import_ts_dedent.default`
        Could not find stories in main.js in ${configDir}. 
        If you are using a mono-repository, please run the test-runner only against your sub-package, which contains a .storybook folder with "stories" defined in main.js.
        You can change the config directory by using --config-dir <path-to-dir>
        `);
  }
  return mainConfig;
}, "getStorybookMain");
function resetStorybookMainCache() {
  storybookMainConfig.clear();
}
__name(resetStorybookMainCache, "resetStorybookMainCache");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getStorybookMain,
  resetStorybookMainCache
});
