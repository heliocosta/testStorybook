import { Page, BrowserContext } from 'playwright';
import { StoryContext } from '@storybook/csf';

type TestContext = {
    id: string;
    title: string;
    name: string;
};
type PrepareContext = {
    page: Page;
    browserContext: BrowserContext;
    testRunnerConfig: TestRunnerConfig;
};
type TestHook = (page: Page, context: TestContext) => Promise<void>;
type HttpHeaderSetter = (url: string) => Promise<Record<string, any>>;
type PrepareSetter = (context: PrepareContext) => Promise<void>;
interface TestRunnerConfig {
    setup?: () => void;
    preRender?: TestHook;
    postRender?: TestHook;
    /**
     * Adds http headers to the test-runner's requests. This is useful if you need to set headers such as `Authorization` for your Storybook instance.
     */
    getHttpHeaders?: HttpHeaderSetter;
    /**
     * Overrides the default prepare behavior of the test-runner. Good for customizing the environment before testing, such as authentication etc.
     *
     * If you override the default prepare behavior, even though this is powerful, you will be responsible for properly preparing the browser. Future changes to the default prepare function will not get included in your project, so you will have to keep an eye out for changes in upcoming releases.
     */
    prepare?: PrepareSetter;
}
declare const setPreRender: (preRender: TestHook) => void;
declare const setPostRender: (postRender: TestHook) => void;
declare const getStoryContext: (page: Page, context: TestContext) => Promise<StoryContext>;

export { HttpHeaderSetter, PrepareContext, PrepareSetter, TestContext, TestHook, TestRunnerConfig, getStoryContext, setPostRender, setPreRender };
