#!/usr/bin/env node
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var import_fs = __toESM(require("fs"));
var import_child_process = require("child_process");
var import_node_fetch = __toESM(require("node-fetch"));
var import_can_bind_to_host = __toESM(require("can-bind-to-host"));
var import_ts_dedent = __toESM(require("ts-dedent"));
var import_path = __toESM(require("path"));
var import_tempy = __toESM(require("tempy"));
var import_getCliOptions = require("./util/getCliOptions");
var import_getStorybookMetadata = require("./util/getStorybookMetadata");
var import_getTestRunnerConfig = require("./util/getTestRunnerConfig");
var import_transformPlaywrightJson = require("./playwright/transformPlaywrightJson");
var import_glob = require("glob");
process.env.BABEL_ENV = "test";
process.env.NODE_ENV = "test";
process.env.STORYBOOK_TEST_RUNNER = "true";
process.env.PUBLIC_URL = "";
let getHttpHeaders = /* @__PURE__ */ __name((_url) => Promise.resolve({}), "getHttpHeaders");
process.on("unhandledRejection", (err) => {
  throw err;
});
const log = /* @__PURE__ */ __name((message) => console.log(`[test-storybook] ${message}`), "log");
const error = /* @__PURE__ */ __name((err) => {
  if (err instanceof Error) {
    console.error(`\x1B[31m[test-storybook]\x1B[0m ${err.message} 

${err.stack}`);
  } else {
    console.error(`\x1B[31m[test-storybook]\x1B[0m ${err}`);
  }
}, "error");
let indexTmpDir;
const cleanup = /* @__PURE__ */ __name(() => {
  if (indexTmpDir) {
    log(`Cleaning up ${indexTmpDir}`);
    import_fs.default.rmSync(indexTmpDir, {
      recursive: true,
      force: true
    });
  }
}, "cleanup");
async function reportCoverage() {
  const coverageFolderE2E = import_path.default.resolve(process.cwd(), ".nyc_output");
  const coverageFolder = import_path.default.resolve(process.cwd(), process.env.STORYBOOK_COVERAGE_DIRECTORY ?? "coverage/storybook");
  if (!import_fs.default.existsSync(coverageFolderE2E)) {
    return;
  }
  if (!import_fs.default.existsSync(coverageFolder)) {
    import_fs.default.mkdirSync(coverageFolder, {
      recursive: true
    });
  }
  import_fs.default.renameSync(`${coverageFolderE2E}/coverage.json`, `${coverageFolder}/coverage-storybook.json`);
  import_fs.default.rmSync(coverageFolderE2E, {
    recursive: true
  });
  if (process.env.JEST_SHARD !== "true") {
    (0, import_child_process.execSync)(`npx nyc report --reporter=text -t ${coverageFolder} --report-dir ${coverageFolder}`, {
      stdio: "inherit"
    });
  }
}
__name(reportCoverage, "reportCoverage");
const onProcessEnd = /* @__PURE__ */ __name(() => {
  cleanup();
  if (process.env.STORYBOOK_COLLECT_COVERAGE === "true") {
    reportCoverage();
  }
}, "onProcessEnd");
process.on("SIGINT", onProcessEnd);
process.on("exit", onProcessEnd);
function sanitizeURL(url) {
  let finalURL = url;
  if (finalURL.indexOf("http://") === -1 && finalURL.indexOf("https://") === -1) {
    finalURL = "http://" + finalURL;
  }
  finalURL = finalURL.replace(/iframe.html\s*$/, "");
  finalURL = finalURL.replace(/index.html\s*$/, "");
  if (finalURL.slice(-1) !== "/") {
    finalURL = finalURL + "/";
  }
  return finalURL;
}
__name(sanitizeURL, "sanitizeURL");
async function executeJestPlaywright(args) {
  const jestPath = import_path.default.dirname(require.resolve("jest", {
    paths: [
      import_path.default.join(__dirname, "../@storybook/test-runner/node_modules")
    ]
  }));
  const jest = require(jestPath);
  let argv = args.slice(2);
  const configDir = process.env.STORYBOOK_CONFIG_DIR || "";
  const [userDefinedJestConfig] = (await Promise.all([
    (0, import_glob.glob)(import_path.default.join(configDir, "test-runner-jest*"), {
      windowsPathsNoEscape: true
    }),
    (0, import_glob.glob)(import_path.default.join("test-runner-jest*"), {
      windowsPathsNoEscape: true
    })
  ])).reduce((a, b) => a.concat(b), []);
  const jestConfigPath = userDefinedJestConfig || import_path.default.resolve(__dirname, import_path.default.join("..", "playwright", "test-runner-jest.config.js"));
  argv.push("--config", jestConfigPath);
  await jest.run(argv);
}
__name(executeJestPlaywright, "executeJestPlaywright");
async function checkStorybook(url) {
  try {
    const headers = await getHttpHeaders(url);
    const res = await (0, import_node_fetch.default)(url, {
      method: "HEAD",
      headers
    });
    if (res.status !== 200)
      throw new Error(`Unxpected status: ${res.status}`);
  } catch (e) {
    console.error(import_ts_dedent.default`\x1b[31m[test-storybook]\x1b[0m It seems that your Storybook instance is not running at: ${url}. Are you sure it's running?
      
      If you're not running Storybook on the default 6006 port or want to run the tests against any custom URL, you can pass the --url flag like so:
      
      yarn test-storybook --url http://127.0.0.1:9009
      
      More info at https://github.com/storybookjs/test-runner#getting-started`);
    process.exit(1);
  }
}
__name(checkStorybook, "checkStorybook");
async function getIndexJson(url) {
  const indexJsonUrl = new URL("index.json", url).toString();
  const storiesJsonUrl = new URL("stories.json", url).toString();
  const headers = await getHttpHeaders(url);
  const fetchOptions = {
    headers
  };
  const [indexRes, storiesRes] = await Promise.all([
    (0, import_node_fetch.default)(indexJsonUrl, fetchOptions),
    (0, import_node_fetch.default)(storiesJsonUrl, fetchOptions)
  ]);
  if (indexRes.ok) {
    try {
      const json = await indexRes.text();
      return JSON.parse(json);
    } catch (err) {
    }
  }
  if (storiesRes.ok) {
    try {
      const json = await storiesRes.text();
      return JSON.parse(json);
    } catch (err) {
    }
  }
  throw new Error(import_ts_dedent.default`
    Failed to fetch index data from the project.

    Make sure that either of these URLs are available with valid data in your Storybook:
    ${// TODO: switch order once index.json becomes more common than stories.json
  storiesJsonUrl}
    ${indexJsonUrl}

    More info: https://github.com/storybookjs/test-runner/blob/main/README.md#indexjson-mode
  `);
}
__name(getIndexJson, "getIndexJson");
async function getIndexTempDir(url) {
  let tmpDir;
  try {
    const indexJson = await getIndexJson(url);
    const titleIdToTest = (0, import_transformPlaywrightJson.transformPlaywrightJson)(indexJson);
    tmpDir = import_tempy.default.directory();
    Object.entries(titleIdToTest).forEach(([titleId, test]) => {
      const tmpFile = import_path.default.join(tmpDir, `${titleId}.test.js`);
      import_fs.default.writeFileSync(tmpFile, test);
    });
  } catch (err) {
    error(err);
    process.exit(1);
  }
  return tmpDir;
}
__name(getIndexTempDir, "getIndexTempDir");
function ejectConfiguration() {
  const origin = import_path.default.resolve(__dirname, "../playwright/test-runner-jest.config.js");
  const destination = import_path.default.resolve("test-runner-jest.config.js");
  const fileAlreadyExists = import_fs.default.existsSync(destination);
  if (fileAlreadyExists) {
    throw new Error(import_ts_dedent.default`Found existing file at:
    
    ${destination}
    
    Please delete it and rerun this command.
    \n`);
  }
  import_fs.default.copyFileSync(origin, destination);
  log("Configuration file successfully copied as test-runner-jest.config.js");
}
__name(ejectConfiguration, "ejectConfiguration");
const main = /* @__PURE__ */ __name(async () => {
  const { jestOptions, runnerOptions } = (0, import_getCliOptions.getCliOptions)();
  if (runnerOptions.eject) {
    ejectConfiguration();
    process.exit(0);
  }
  process.env.STORYBOOK_CONFIG_DIR = runnerOptions.configDir;
  const testRunnerConfig = (0, import_getTestRunnerConfig.getTestRunnerConfig)(runnerOptions.configDir) || {};
  if (testRunnerConfig.getHttpHeaders) {
    getHttpHeaders = testRunnerConfig.getHttpHeaders;
  }
  const isWatchMode = jestOptions.includes("--watch") || jestOptions.includes("--watchAll");
  const rawTargetURL = process.env.TARGET_URL || runnerOptions.url || "http://127.0.0.1:6006";
  await checkStorybook(rawTargetURL);
  const targetURL = sanitizeURL(rawTargetURL);
  process.env.TARGET_URL = targetURL;
  if (!isWatchMode && runnerOptions.coverage) {
    process.env.STORYBOOK_COLLECT_COVERAGE = "true";
  }
  if (runnerOptions.coverageDirectory) {
    process.env.STORYBOOK_COVERAGE_DIRECTORY = runnerOptions.coverageDirectory;
  }
  if (runnerOptions.junit) {
    process.env.STORYBOOK_JUNIT = "true";
  }
  if (process.env.REFERENCE_URL) {
    process.env.REFERENCE_URL = sanitizeURL(process.env.REFERENCE_URL);
  }
  if (jestOptions.includes("--shard")) {
    process.env.JEST_SHARD = "true";
  }
  if (!process.env.TEST_BROWSERS && runnerOptions.browsers) {
    if (Array.isArray(runnerOptions.browsers))
      process.env.TEST_BROWSERS = runnerOptions.browsers.join(",");
    else
      process.env.TEST_BROWSERS = runnerOptions.browsers;
  }
  const { hostname } = new URL(targetURL);
  const isLocalStorybookIp = await (0, import_can_bind_to_host.default)(hostname);
  const shouldRunIndexJson = runnerOptions.indexJson !== false && !isLocalStorybookIp;
  if (shouldRunIndexJson) {
    log("Detected a remote Storybook URL, running in index json mode. To disable this, run the command again with --no-index-json\n");
  }
  if (runnerOptions.indexJson || shouldRunIndexJson) {
    indexTmpDir = await getIndexTempDir(targetURL);
    process.env.TEST_ROOT = indexTmpDir;
    process.env.TEST_MATCH = "**/*.test.js";
  }
  const { storiesPaths, lazyCompilation } = (0, import_getStorybookMetadata.getStorybookMetadata)();
  process.env.STORYBOOK_STORIES_PATTERN = storiesPaths;
  if (runnerOptions.failOnConsole) {
    process.env.TEST_CHECK_CONSOLE = "true";
  }
  if (lazyCompilation && isLocalStorybookIp) {
    log(`You're running Storybook with lazy compilation enabled, and will likely cause issues with the test runner locally. Consider disabling 'lazyCompilation' in ${runnerOptions.configDir}/main.js when running 'test-storybook' locally.`);
  }
  await executeJestPlaywright(jestOptions);
}, "main");
main().catch((e) => {
  error(e);
  process.exit(1);
});
